---
title: "STAT 331 Portfolio"
author: "Chloe Feehan"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

Lab 4 Question 0

```{r wd-1-csv}
avocados <- read_csv(here("Labs", "Lab 4", "avocado.csv"))
```

-   `xlsx`

Practice Activity 4

```{r wd-1-xlsx}
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 190)
```

-   `txt`

Practice Activity 5.2

```{r wd-1-txt}
message <- read_csv(here::here("Practice Activities", 
                               "PA 5.2",
                               "scrambled_message.txt")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Question 9

```{r wd-2}
hiphop_clean |>
  distinct(subj, .keep_all = TRUE) |>
  select(sex, age, ethnic) |>
  summary() 
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 Question 11

```{r wd-3-numeric}
under_twenty <- hiphop_clean |>
  filter(age < 20) |>
  mutate(
    familiarity = as.numeric(familiarity)
    ) |>
  group_by(word) |>
  summarize(mean_fam =
    mean(familiarity))
```

-   character -- specifically a string

Lab 8 Question 1 (pluralize function)

```{r wd-3-string}
pluralize_gift <- function(gift){

gift <- 
  case_when(
    str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
    str_detect(gift, "y$") ~ str_replace(gift, "y$", "ies"),
    TRUE ~ str_c(gift, "s", sep = "")
  )

return(gift)

}
```

-   factor

Lab 3 Question 12

```{r wd-3-factor}
non_white_women <- hiphop_clean |>
  filter(ethnic == "non-white" & 
           sex == "Female"
          ) |>
  mutate(
    familiarity = as.numeric(familiarity)
    ) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity))
```

-   date

Practice Activity 5.1 Question 4

```{r wd-3-date}
suspects <- suspects |>
  filter(pm(Iceland) == TRUE,
         day(Time.Spotted) %in% c(22, 23, 24))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 4 Question 7

```{r wd-4-numeric}
ca_plot <-
  semi_join(avocados_clean, california_regions,
           by = "region") |>
  pivot_longer("Small":"XLarge", 
               names_to = "avo_size", 
               values_to = "volume") |>
  group_by(region, avo_size, type) |>
   summarize(
     avg_size = mean(volume))|>
  group_by(region, type) |>
  mutate(
    total = sum(avg_size)
  ) |>
    mutate(
      proportion = (avg_size/total)
  ) 
```

-   character -- specifically a string

Practice Activity 5.2

```{r wd-4-string}
mess <- str_flatten(word, collapse = " ")
```

-   factor

Lab 3 Question 7

```{r wd-4-factor}
hiphop_clean <- hiphop_clean |>
  mutate(ethnic = 
    case_when(ethnic == "white"~"white",
            TRUE ~ "non-white"),
    ethnic = as.factor(ethnic)
  )
```

-   date

Practice Activity 5.1 Question 6

```{r wd-4-date}
suspects <- suspects |>
  mutate(time = difftime(Time.Spotted, init, units = "mins"),
         time = as.integer(time)) |>
  filter(time %% 10 == 0)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

Preview Activity 4.3 Part C

```{r wd-5-left}
#changed for the portfolio
prof_course |>
  pivot_longer(cols = c(Stat_331, Stat_330, Stat_431),
               names_to = "course",
               values_to = "can_teach") |>
  full_join(course_info)
```

-   `right_join()`

Preview Activity 4.3 Part A

```{r wd-5-right}
right_join(prof_info, prof_course)
```

-   `inner_join()`

Preview Activity 4.3 Part A

```{r wd-5-inner}
#changed for the portfolio
inner_join(prof_info, prof_course)
```

-   `full_join()`

Challenge 4

```{r wd-5-full}
new_avocados <- 
  full_join(avocados_avg, housing, by = c("region", "year")) 
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

Lab 4 Question 6

```{r wd-6-semi}
ca_avocados <- 
  semi_join(avocados_clean, ca_cities, by = "region") |>
  group_by(region, type) |>
  summarize(
    price = mean(AveragePrice)
  ) |>
  pivot_wider(names_from = type, 
              values_from = price) |>
  mutate(
    difference = organic - conventional
  ) 

```

-   `anti_join()`

Lab 4 Question 2

```{r wd-6-anti}
avocados_clean <- 
  anti_join(avocados, regions_major, by = "region") |>
  anti_join(regions_minor, by = "region") |>
  rename("Small" = "4046", 
         "Large" = "4225", 
         "XLarge" = "4770", 
         "TotalVolume" = "Total Volume") 
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

Lab 4 Question 7

```{r wd-7-long}
ca_plot <-
  semi_join(avocados_clean, california_regions,
           by = "region") |>
  pivot_longer("Small":"XLarge", 
               names_to = "avo_size", 
               values_to = "volume") |>
  group_by(region, avo_size, type) |>
   summarize(
     avg_size = mean(volume))|>
  group_by(region, type) |>
  mutate(
    total = sum(avg_size)
  ) |>
    mutate(
      proportion = (avg_size/total)
  ) 
```

-   `pivot_wider()`

Lab 4 Question 6

```{r wd-7-wide}
ca_avocados <- 
  semi_join(avocados_clean, ca_cities, by = "region") |>
  group_by(region, type) |>
  summarize(
    price = mean(AveragePrice)
  ) |>
  pivot_wider(names_from = type, 
              values_from = price) |>
  mutate(
    difference = organic - conventional
  ) 

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 3, Lab 4, Lab 5, Lab 7, Challenge 9

**R-2: I can write well documented and tidy code.**

-   Example 1: Lab 3 Question 14

```{r r-2-1}
#Code was changed for Portfolio
hiphop_clean |>
  distinct(subj, .keep_all = TRUE) |>
  filter(between(age, 17, 23),
         between(city, 10000, 60000),
         sex == "Male",
         ethnic == "white") |>  
         slice_max(bieber) |> 
  select(subj)
```

-   Example 2: Lab 9 Question 9

```{r r-2-2}
names |>
  rename("Sex" = "Gender") |>
  filter(Year == 2000,
         State %in% c("CA", "PA"),
         Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M"
         ) |>
  select(Name, State, Count) |>
  group_by(Name)|>
  pivot_wider(names_from = Name,
              values_from = Count)|>
  knitr::kable(format = "html",
               col.names =
                 c("State", "Alan", "Allen", "Allan"),
               caption = "Number of Male Babies Born in 2000 by Name and State"
               )
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1: Lab 7 Question 2.2

```{r r-3-1}
rescale_01 <- function(var) {
  stopifnot(is.numeric(var),
            length(var) > 1)
  
  rng = range(var, na.rm = TRUE)
  
  var_min = min(var, na.rm = TRUE)
  num <- var - rng[1]
  denom <- rng[2] - rng[1]
  
  num / denom
}
```

-   Example 2: Lab 8 (Phrase Function)

```{r r-3-2}
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
  day <- str_replace_na(day, "")
  num_word <- str_replace_na(num_word, "")
  item <- str_replace_na(item, "")
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
 item <-
   case_when(
    day > 1 ~ pluralize_gift(item),
    TRUE ~ item)
 
 article <-
   case_when(
     day == 1 & str_detect(item, "^[aeiou]") ~ "an",
     day == 1 ~ "a",
     TRUE ~ ""
  )
  
 num_word <- case_when(day == 1 ~ "",
                       TRUE ~ num_word
                       
   )

  phrase <- glue("{article} {num_word} {adjective} {item} {verb} {location}")
  return(phrase)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

Lab 9 Question 3

```{r dvs-1-num}
allison_f |>
  group_by(Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  ggplot(mapping = (aes(x = Year, y = Count))) +
  geom_line(color = "darkblue") +
  scale_x_continuous(breaks = c("1997":"2014"), 
                     guide = guide_axis(n.dodge = 2)) +
  scale_y_continuous(n.breaks = 8) +
  labs(x = "Year", y = "Count", 
       title = "Number of Babies Named Allison from 1997 to 2014") +
  theme(text = element_text(family = "Optima"))
```

-   numeric variables and categorical variables

Lab 5 Question 1

```{r dvs-2-num-cat}
 ggplot(data = surveys, mapping = aes(weight, fct_reorder(species, weight))) +
    geom_jitter(color = "orange", alpha = .1) +
    geom_boxplot(outlier.shape = NA) + 
    labs(x= "Weight (g)", y = "", title = "Species of Rodent by Weight (g)")
```

-   categorical variables

Lab 4 Question 7

```{r dvs-2-cat}
ggplot(data = ca_plot, mapping = aes(x = region, y = proportion, 
                                     fill = factor(avo_size, 
                                                   levels = c("Small", "Large", "XLarge")))) +
  facet_wrap(~type) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("#a6cee3" , "#1f78b4", "#b2df8a")
  ) +
  labs(x = "Region of CA", y = "Proportion of Mean Avocadods Sold", 
        title = "Proportion of Avocados by Size and California City",
        fill = "Avocado Size") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))
```

-   dates

Lab 9 Question 4

```{r dvs-2-date}
allison_f |>
  group_by(Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  ggplot(mapping = aes(x = Year, y = Count)) +
  geom_point(color = "darkblue") +
  geom_smooth(method = "lm", fill = "lightblue", color = "aquamarine4") +
  scale_x_continuous(breaks = c("1997":"2014"), 
                     guide = guide_axis(n.dodge = 2)) +
  scale_y_continuous(n.breaks = 8) +
  labs(x = "Year", y = "", title = "Number of Babies Named Allison from 1997 to 2014") +
  theme(text = element_text(family = "Optima"))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1: Lab 9 Question 8

```{r dvs-2-1}
names |>
  rename("Sex" = "Gender") |>
  filter(Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M") |>
  group_by(Name, Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  ggplot(mapping = aes(x = Year, y = Count, color = Name)) +
    geom_line() +
    scale_y_continuous(n.breaks = 8) +
    scale_color_manual(values = c("darkslategray4", "aquamarine3", "cyan2")) +
    labs(x = "Year", y = "Count", 
         title = "Number of Babies Named Alan, Allan, or Allen from 1997 to 2014") +
  theme(text = element_text(family = "Optima"))
```

-   Example 2: Lab 5 Question 4

```{r dvs-2-2}
ggplot(data = mean_plot, 
       mapping = aes(x = year, 
                     y = mean_weight, 
                     color = fct_reorder2(genus, 
                                          year, 
                                          mean_weight))) +
    geom_line(stat = "identity") +
    labs(x= "Year", y = "", title = "Mean Weight of Rodent Genus by Year", color = "Genus")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1: Lab 7 Question 2.2

```{r dvs-3-1}
fish |>
  filter(
    is.na(weight)
  ) |>
  
ggplot(mapping = aes(x = as.factor(year), fill = section)) +
  facet_grid(~trip, labeller = label_both) +
  geom_bar() +
  scale_fill_manual(values = c("darkmagenta", "deepskyblue3")) +
  labs(x = "Year", y = "Frequency", 
       title = "Frequency of Missing Fish Weight Values by Year, Section, and Trip", 
       fill = "Section") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme(text = element_text(family = "Optima"))

```

-   Example 2: Lab 9 Question 8

```{r dvs-3-2}
names |>
  rename("Sex" = "Gender") |>
  filter(Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M") |>
  group_by(Name, Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  ggplot(mapping = aes(x = Year, y = Count, color = Name)) +
    geom_line() +
    facet_wrap(~Name) +
    scale_y_continuous(n.breaks = 8) +
    scale_color_manual(values = c("darkslategray4", "aquamarine3", "cyan2")) +
    labs(x = "Year", y = "Count", 
         title = "Number of Babies Named Alan, Allan, or Allen from 1997 to 2014") +
  theme(text = element_text(family = "Optima"))
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1: Lab 4 Question 7

```{r dvs-4-1}
ca_plot <-
  semi_join(avocados_clean, california_regions,
           by = "region") |>
  pivot_longer("Small":"XLarge", 
               names_to = "avo_size", 
               values_to = "volume") |>
  group_by(region, avo_size, type) |>
   summarize(
     avg_size = mean(volume))|>
  group_by(region, type) |>
  mutate(
    total = sum(avg_size)
  ) |>
    mutate(
      proportion = (avg_size/total)
  ) 
```

-   Example 2: Lab 3 Question 11

```{r dvs-4-2}
under_twenty <- hiphop_clean |>
  filter(age < 20) |>
  mutate(
    familiarity = as.numeric(familiarity)
    ) |>
  group_by(word) |>
  summarize(mean_fam =
    mean(familiarity))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1: Challenge 3

```{r dvs-5-1}
#code changed for portfolio
white_nonwhite <- new_hiphop |>
  group_by(ethnic) |> 
  summarize(
      across(.cols = intl:unclassifiable, 
              .fns = ~mean(.x)
    ))

```

-   Example 2: Challenge 3

```{r dvs-5-2}
#code changed for portfolio
male_female <- new_hiphop |>
  group_by(sex) |> 
  summarize(
      across(.cols = intl:unclassifiable, 
              .fns = ~ mean(.x)
    ))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1: Challenge 9 Question 9

```{r dvs-6-1}
names |>
  rename("Sex" = "Gender") |>
  filter(Year == 2000,
         State %in% c("CA", "PA"),
         Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M"
         ) |>
  select(Name, State, Count) |>
  group_by(Name)|>
  pivot_wider(names_from = Name,
              values_from = Count)|>
  knitr::kable(format = "html",
               col.names =
                 c("State", "Alan", "Allen", "Allan"),
               caption = "Number of Male Babies Born in 2000 by Name and State"
               ) |>
  kableExtra::kable_classic(html_font = "Optima") |>
  kable_styling(bootstrap_options = "striped", font_size = 14)
```

-   Example 2: Challenge 9 Question 10

```{r dvs-6-2}
names |>
  rename("Sex" = "Gender") |>
  filter(Year == 2000,
         State %in% c("CA", "PA"),
         Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M"
         ) |>
  group_by(Name)|>
  mutate(
    Percentage = Count/sum(Count)
  ) |>
  select(Name, State, Percentage) |>
  pivot_wider(names_from = Name,
              values_from = Percentage)|>
  gt() |>
  tab_header(title = "Percentage of Male Babies Born in 2000 by Name and State") |>
  fmt_percent(columns = 2:4, decimals = 2) 
```

**DVS-7: I show creativity in my tables.**

-   Example 1: Challenge 9 Question 9

```{r dvs-7-1}
names |>
  rename("Sex" = "Gender") |>
  filter(Year == 2000,
         State %in% c("CA", "PA"),
         Name %in% c("Allan", "Alan", "Allen"),
         Sex == "M"
         ) |>
  select(Name, State, Count) |>
  group_by(Name)|>
  pivot_wider(names_from = Name,
              values_from = Count)|>
  knitr::kable(format = "html",
               col.names =
                 c("State", "Alan", "Allen", "Allan"),
               caption = "Number of Male Babies Born in 2000 by Name and State"
               ) |>
  kableExtra::kable_classic(html_font = "Optima") |>
  kable_styling(bootstrap_options = "striped", font_size = 14)
```

-   Example 2: Challenge 9 Question 1

```{r dvs-7-2}
names |>
  rename("Sex" = "Gender") |>
  filter(Name == "Allison") |>
  select(State, Sex, Count) |>
  group_by(State, Sex) |>
  summarize(
    Count = sum(Count)
  ) |>
  pivot_wider(names_from = Sex,
              values_from = Count) |>
  mutate(
    F = if_else(is.na(F), 0, F),
    M = if_else(is.na(M), 0, M)
  ) |>
  knitr::kable(format = "html",
               col.names =
                 c("State", "Female", "Male"),
               caption = "Number of Babies Born with the Name Allison By Sex and State"
               ) |>
  kableExtra::kable_classic(html_font = "Optima") |>
  kable_styling(bootstrap_options = "striped", font_size = 14)
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call: Lab 4 Question 2

```{r pe-1-one-call}
avocados_clean <- 
  anti_join(avocados, regions_major, by = "region") |>
  anti_join(regions_minor, by = "region") |>
  rename("Small" = "4046", 
         "Large" = "4225", 
         "XLarge" = "4770", 
         "TotalVolume" = "Total Volume") 

```

-   `across()`

Challenge 3

```{r pe-1-across}
#code changed for portfolio
white_nonwhite <- new_hiphop |>
  group_by(ethnic) |> 
  summarize(
      across(.cols = intl:unclassifiable, 
              .fns = ~mean(.x)
    ))
```

-   `map()` functions

Lab 8

```{r pe-1-map-1}
song <- map_chr(.x = 1:12,
                .f = ~sing_day(dataset = xmas2, num = .x, phrase_col = Full.Phrase))
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Lab 8 (Phrase Function)

```{r pe2-1}
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
  day <- str_replace_na(day, "")
  num_word <- str_replace_na(num_word, "")
  item <- str_replace_na(item, "")
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
 item <-
   case_when(
    day > 1 ~ pluralize_gift(item),
    TRUE ~ item)
 
 article <-
   case_when(
     day == 1 & str_detect(item, "^[aeiou]") ~ "an",
     day == 1 ~ "a",
     TRUE ~ ""
  )
  
 num_word <- case_when(day == 1 ~ "",
                       TRUE ~ num_word
                       
   )
 

  phrase <- glue("{article} {num_word} {adjective} {item} {verb} {location}")
  return(phrase)
}
```

-   Example 2: Lab 8 (Sing-Day Function)

```{r pe2-2}
sing_day <- function(dataset, num, phrase_col) {
  
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <- ordinal(num)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me:")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} ) 
    
    lyrics <- str_flatten(phrases[num:1])
    
    return(glue::glue("{intro} {lyrics}"))
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

Challenge 3

```{r pe-3-across}
white_nonwhite <- new_hiphop |>
  group_by(ethnic) |> 
  summarize(
      across(.cols = intl:unclassifiable, 
              .fns = mean, na.rm = TRUE
    ))
```

-   `map()` functions (Provide 2 Examples): Lab 8 (Testing the Function)

```{r pe-3-map-1}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)),
         
         Full.Phrase = pmap_chr(.l = list(
           day = Day,
           num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
        .f = make_phrase))

print(str_squish(xmas2$Full.Phrase))
```

Lab 8

```{r pe-3-map-2}
song <- map_chr(.x = 1:12,
                .f = ~sing_day(dataset = xmas2, num = .x, phrase_col = Full.Phrase))

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1: Lab 4 Question 7

```{r pe-4-1}
ca_plot <-
  semi_join(avocados_clean, california_regions,
           by = "region") |>
  pivot_longer("Small":"XLarge", 
               names_to = "avo_size", 
               values_to = "volume") |>
  group_by(region, avo_size, type) |>
   summarize(
     avg_size = mean(volume))|>
  group_by(region, type) |>
  mutate(
    total = sum(avg_size)
  ) |>
    mutate(
      proportion = (avg_size/total)
  )
```

-   Example 2: Lab 3 Question 14

```{r pe-4-2}
#code changed for portfolio
hiphop_clean |>
  distinct(subj, .keep_all = TRUE) |>
  filter(between(age, 17, 23),
         between(city, 10000, 60000),
         sex == "Male",
         ethnic == "white") |>  
         slice_max(bieber) |> 
  select(subj)
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1: Practice Activity 9.2

```{r dsm-1-1}
music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = .8)
  cornets <- runif(n_cor, min = 1.5, max = 3.5)
  reeds <- rchisq(n_reed, df = 4)
  
  return(sum(c(trombones, cornets, reeds)))
  
}
```

-   Example 2: Practice Activity 9.2

```{r dsm-1-2}
dchisq(5, df = 4)
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1: Lab 9 Question 4

```{r dsm-2-1}
allison_f |>
  group_by(Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  ggplot(mapping = aes(x = Year, y = Count)) +
  geom_point(color = "darkblue") +
  geom_smooth(method = "lm", fill = "lightblue", color = "aquamarine4") +
  scale_x_continuous(breaks = c("1997":"2014"), 
                     guide = guide_axis(n.dodge = 2)) +
  scale_y_continuous(n.breaks = 8) +
  labs(x = "Year", y = "Count", title = "Number of Babies Named Allison from 1997 to 2014") +
  theme(text = element_text(family = "Optima"))
```

-   Example 2: Lab 9 Question 5

```{r dsm-2-2}
allison_f |>
  group_by(Year) |>
  summarize(
    Count = sum(Count)
  ) |>
  lm(Count ~ Year,
     data = _)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, I have revised every single one of my lab assignments, and from those revisions, I have learned a lot more about programming. In each revision, I have taken into account all of the feedback I have received from both Dr. T and my peer grader. I apply all of those revisions to my lab as well as any formatting errors that I think need to be updated. For example, one of the lab assignments that has demonstrated my knowledge of the learning targets was Lab 4. In Lab 4, one of the main revisions I made was changing my plot in Question 6. I originally had created a bar plot to represent the data, but later realized that bar plots are better for representing categorical data. Since this data was numerical, I changed it to Cleveland dot-plot. It took some trial and error, but I eventually figured out how to plot both the segment and the point. A Cleveland dot plot is more visually appealing and better represents the dataset. Another lab where I continued to revise my thinking was in Lab 3. Initially, I was slightly confused on when it was appropriate to use the distinct() function versus the group_by() function. In Lab 3 Question 14, I demonstrated my understanding of this topic by switching it to distinct() from group_by(). I also learned a new method of how to write more efficient code through using the between() function. The between function allowed me to filter certain aspects of the code rather than using & or a comma. Although there were some aspects of certain labs that I received a growing on, I feel like I have understood the previous learning targets. I have also received a complete on all of the challenges, demonstrating my knowledge and understanding of the learning targets through those assignments. Especially now that some aspects, such as plotting a boxplot, have been repeated throughout the labs, I feel like I fully understand those learning targets. I have also attended office hours a couple times in order to completely understand where I went wrong.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

One of the labs where I went specifically above and beyond, was Lab 4. Through that lab, I was able to learn about different attributes that could be added to different ggplots, such as labeling the legend and specifying different colors. One of the questions in particular, Question 7, I demonstrated extending my thinking. In order to design the correct plot, I had to figure out how to change the order of the levels on the legend. I researched and tested different methods of doing this to see which ones worked best, or didn't work at all. The method that I ended up using was turning the fill argument into a factor and manually relabeling the order. I was also unsure of how I was able to assign different colors to the legend. Through the research I conducted, I found a source that explained the use of scale_fill_manual(). I was able to figure out how to assign the different colors through this method. Additionally, for Lab 4 Question 5, I was unsure how to use change my plot axis to not use scientific notation, as it is not appealing for the reader. After researching, I found an option of doing scipen = 999 that would transform it out of scientific notation. Before Lab 4, I wasn't sure what was expected of me through the extending my thinking portion, but now I know to provide external resources when completing the activities. In challenge 4, I was also able to extend my thinking by creating a data set of housing prices and finding values that adhere to it. I researched different housing prices based on the area and created a dataset. I also was able to extend my thinking through playing around with different plot styles and colors when doing the practice activities. Now, in almost all of my lab and challenge activities, I have included various plot colors to make them more visually appealing.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

Throughout the semester, I have collaborated significantly with my classmates inside of class and outside of class. Each week during class, I work collaboratively with my teammates by asking them clarifying questions and advising them on what steps to take. Outside of class, I answer my group mates questions in our group chat and provide them with external resources that may be helpful in understanding the problem they face. I also try to respond to questions in the discord to the best of my ability, however I sometimes don't know the answer. As of now, I have responded to one discord question and am looking forward to helping my classmates in the future. I also work collaboratively with other classmates in the library to help bounce ideas off of each other and discuss possible errors that may arise. I explain to them how to use certain functions and provide with ideas on how they can possibly make their code tidy and more efficient. I have also completed all of the assigned peer review and provided my classmates with helpful feedback to revise their code. I make sure to look carefully at each assignment submitted in order to catch any possible errors as well as make sure I provide them with constructive feedback. I also offer possible solutions of other functions they may be able to use in replacement of superseded or inefficient code. I feel as though I have grown as a leader within my group, especially when I am the reporter. When I was the reporter, I often wasn't exactly sure what to write for the code, but my teammates were able to walk me through the correct format. I ask questions to clarify and I offer explanations of what the code is doing in order to better understand it. I provide my team with possible answers and ideas to further promote everyone's understanding of the code and to help figure out the solution. In these ways, I felt that I have grown as a leader through promoting discussion within the team to help me and others better understand what the code was doing.

