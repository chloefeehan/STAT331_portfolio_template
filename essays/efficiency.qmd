---
title: "The Power of Efficiency"
format: html
editor: visual
---

The definition of efficiency in the context of statistical computing is the ability to produce code that reduces repetition, is resistant to changes. Efficiency allows us to perform analyses faster and apply functions across multiple columns and variables. It also minimizes the potential for errors as it decreases the number of times you have to call a function. Efficient code is tidy and typically only calls a function once when necessary. Since efficient code is typically shorter and faster to write, it allows us to spend more time working on other aspects of reports, such as visualizations. 

One specific area where I encountered efficiency was when I learned about the across function in Challenge 3. The across function allows you to select certain columns and apply a function to all of those columns. Before learning about the across function, I would have to mutate each column and apply the specified function individually. Using the across function is more efficient as you only have to specify the column and function once, and it makes the code easier to read through the named arguments. When I applied the across function in Challenge 3, I was able to mutate all of the specified columns into numeric variables, then I was able to compute the mean of all the columns. I was also able to specify the columns needed using a colon, which reduced the time it would take to write out each column. Using this method reduced the amount of potential syntax errors, such as spelling or grammatical errors, that could have occurred without the use of the across function.

Another area where I came across program efficiency was in Lab 8. In Lab 8, we built functions to simulate the song “The 12 Days of Christmas.” Since the song repeats itself countless times, we would have to include a lot of repetition of the code. However, using functions to iterate across the lines creates a faster and more efficient way to get the same output. In Lab 8, we created functions that would make certain words plural based on their placement in the song. In most of the functions, I specified criteria using the case_when function so that function could be used with different inputs, not just one. This was one of the main ways that demonstrated program efficiency as writing code to satisfy each line of the song without functions would be a long and tedious task with many potential sources of error.

Lab 4 was the final area that demonstrated program efficiency, specifically with visualizations. In Lab 4, we used joins and pivoting functions to combine and change the dataset in order to include the necessary variables to build the visualizations. In question 7, we had to pivot the dataset in order to create two columns that included all of the different avocado sizes and their respective values. After learning about the joins and pivot techniques, it made it much easier to combine different aspects of data as well as filter out any unnecessary values. The filtering joins were especially helpful by eliminating any values that weren’t needed in the dataset. I was able to use these smaller datasets for building visualizations. 

Throughout the quarter, I have learned many different ways to create tidy and efficient code that reduces repetition and sources of error. Many of these methods provided me with excitement since they were able to reduce the number of steps I needed to take in order to get to the end result. Moving forward, I can learn to get my code even tidier and even more efficient in the future. 
